using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.Extensions.Logging;
using OSCommander.Dtos;
using OSCommander.Exceptions;
using OSCommander.Models.Samba;
using OSCommander.Repositories;

// ReSharper disable IdentifierTypo
// ReSharper disable StringLiteralTypo
// ReSharper disable CommentTypo

namespace OSCommander.Services
{
    public class SambaService : ISambaService
    {

        private readonly Service _serviceService;

        private readonly CommandRepository _commandRepo;

        public SambaService(SshCredentials ssh)
        {
            _commandRepo = new CommandRepository(ssh);
            _serviceService = new Service(ssh);
        }

        public SambaService()
        {
            _commandRepo = new CommandRepository();
            _serviceService = new Service();
        }

        public SambaService(ILogger logger)
        {
            _commandRepo = new CommandRepository(logger);
            _serviceService = new Service(logger);
        }

        public SambaService(ILogger logger, SshCredentials ssh)
        {
            _commandRepo = new CommandRepository(logger, ssh);
            _serviceService = new Service(logger, ssh);
        }

        /// <summary>
        /// Get content of smb.conf file
        /// </summary>
        /// <exception cref="T:OSCommander.Repositories.CommandFailException">If there will be STDERR or other OS related exceptions occur.
        /// Detailed information can be checked in provided logger.</exception>
        public string Get()
        {
            return _commandRepo.Execute("cat /etc/samba/smb.conf");
        }

        /// <summary>
        /// Update content of smb.conf file
        /// </summary>
        /// <exception cref="T:OSCommander.Exceptions.SambaUpdateException">When smb.conf update fail.</exception>
        public void Update(IEnumerable<SambaEntry> sambaContent)
        {
            try
            {
                var sb = new StringBuilder(string.Empty);
                sb.Append(";=== ============================= ===\n");
                sb.Append(";=== File auto generated by Armnas ===\n");
                sb.Append(";=== ============================= ===\n\n");
                foreach (var entry in sambaContent)
                {
                    sb.Append($"[{entry.Name}]\n");
                    foreach (var (key, value) in entry.Params)
                        sb.Append($"    {key} = {value}\n");
                    sb.Append('\n');
                }
                sb.Append('\n');
                _commandRepo.Execute("cp -f /etc/samba/smb.conf /etc/samba/smb.conf.bak", true);
                _commandRepo.Execute($"echo \"{sb}\" > /etc/samba/smb.conf", true);
                _serviceService.Restart("smbd");
            }
            catch (Exception ex)
            {
                try
                {
                    _commandRepo.Execute("cp -f /etc/samba/smb.conf.bak /etc/samba/smb.conf", true);
                    _serviceService.Restart("smbd");
                }
                catch (Exception)
                {
                    // do nothing
                }
                throw new SambaUpdateException(ex);
            }
        }

    }
}
